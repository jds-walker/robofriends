{"version":3,"sources":["components/Card/Card.tsx","components/CardList/CardList.tsx","components/SearchBox/SearchBox.tsx","components/ErrorBoundary/ErrorBoundary.tsx","containers/App.tsx","actions.tsx","constants.tsx","serviceWorker.js","reducers.tsx","index.tsx"],"names":["Card","_ref","robotEmail","robotName","robotId","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card_Card","key","id","email","name","SearchBox","searchChange","aria-label","type","placeholder","onChange","ErrorBoundry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","err","info","setState","children","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","react","components_SearchBox_SearchBox","ErrorBoundary","components_CardList_CardList","React","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","res","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5c7cc2d1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({\n  robotEmail,\n  robotName,\n  robotId\n}: {\n  robotEmail: string;\n  robotName: string;\n  robotId: number;\n}) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shaddw5\">\n      <img alt=\"robots\" src={`https://robohash.org/${robotId}?size=200x200`} />\n      <div>\n        <h2>{robotName}</h2>\n        <p>{robotEmail}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport { IRobot } from \"../../containers/App\";\nimport Card from \"../Card/Card\";\n\nconst CardList = ({ robots }: { robots: Array<IRobot> }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={robots[i].id}\n            robotEmail={robots[i].email}\n            robotName={robots[i].name}\n            robotId={robots[i].id}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./SearchBox.css\";\n\ninterface ISearchBoxProps {\n  searchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\n}\n\nconst SearchBox = ({ searchChange }: ISearchBoxProps) => {\n  return (\n    <nav>\n      <div className=\"pa2\">\n        <h1 className=\"f2\">RoboFriends</h1>\n        <input\n          aria-label=\"search robots\"\n          className=\"pa3 ba b--green bg-lightest-blue\"\n          type=\"search\"\n          placeholder=\"Search Robots\"\n          onChange={searchChange}\n        />\n      </div>\n    </nav>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\n\ninterface IErrorBoundaryProps {}\n\ninterface IErrorBoundaryState {\n  hasError: Boolean;\n}\n\nclass ErrorBoundry extends Component<IErrorBoundaryProps, IErrorBoundaryState> {\n  constructor(props: IErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(err: any, info: any) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That was not expected</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\nimport CardList from \"../components/CardList/CardList\";\nimport SearchBox from \"../components/SearchBox/SearchBox\";\nimport ErrorBoundary from \"../components/ErrorBoundary/ErrorBoundary\";\nimport \"tachyons\";\n\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = (state: any) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onSearchChange: (event: any) =>\n      dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nexport interface IRobot {\n  name: string;\n  id: number;\n  username: string;\n  email: string;\n}\n\ninterface IAppProps {\n  searchField: string;\n  robots: any;\n  onRequestRobots: any;\n  isPending: any;\n  onSearchChange: (Event: React.SyntheticEvent<Element>) => void;\n}\n\nclass App extends React.Component<IAppProps> {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter((robot: any) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    if (isPending) {\n      return <h1 className=\"tc\">Loading</h1>;\n    } else {\n      return (\n        <div className=\"tc pt7\">\n          <SearchBox searchChange={onSearchChange} />\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField: any = (text: String) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => (dispatch: any) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(res => res.json())\n    .then(users =>\n      dispatch({\n        type: REQUEST_ROBOTS_SUCCESS,\n        payload: users\n      })\n    )\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\nimport { setSearchField } from \"./actions\";\n\nconst initialStateSearch: any = {\n  searchField: \"\"\n};\n\nexport const searchRobots: any = (\n  state: any = initialStateSearch,\n  action: any = {}\n): any => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\"\n};\n\nexport const requestRobots = (\n  state: any = initialStateRobots,\n  action: any = {}\n) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}