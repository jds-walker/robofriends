{"version":3,"sources":["components/Card/Card.tsx","components/CardList/CardList.tsx","components/SearchBox/SearchBox.tsx","containers/App.tsx","serviceWorker.js","index.tsx"],"names":["Card","_ref","robotEmail","robotName","robotId","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card_Card","key","id","email","name","SearchBox","searchChange","type","placeholder","onChange","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","currentTarget","value","state","_this2","fetch","then","res","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","react","components_SearchBox_SearchBox","components_CardList_CardList","React","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAsBeA,SApBF,SAAAC,GAQP,IAPJC,EAOID,EAPJC,WACAC,EAMIF,EANJE,UACAC,EAKIH,EALJG,QAMA,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,mBACrBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIL,OCKGU,EAjBE,SAAAX,GAA2C,IAAxCY,EAAwCZ,EAAxCY,OAClB,OACER,EAAAC,EAAAC,cAAA,WACGM,EAAOC,IAAI,SAACC,EAAMC,GACjB,OACEX,EAAAC,EAAAC,cAACU,EAAD,CACEC,IAAKL,EAAOG,GAAGG,GACfjB,WAAYW,EAAOG,GAAGI,MACtBjB,UAAWU,EAAOG,GAAGK,KACrBjB,QAASS,EAAOG,GAAGG,SCUhBG,SAhBG,SAAArB,GAAuC,IAApCsB,EAAoCtB,EAApCsB,aACnB,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAAA,SACEC,UAAU,mCACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,QCyCLI,qBApCb,SAAAA,EAAYC,GAAkB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAC5BE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaRQ,eAAiB,SAACC,GAChBR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,cAAcC,SAbjDZ,EAAKa,MAAQ,CACX7B,OAAQ,GACR0B,YAAa,IAJaV,mFAQV,IAAAc,EAAAX,KAClBY,MAAM,8CACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAEzB,OAAQmC,uCAOlC,IAAAC,EACyBjB,KAAKU,MAA7B7B,EADDoC,EACCpC,OAAQ0B,EADTU,EACSV,YACVW,EAAiBrC,EAAOsC,OAAO,SAAAC,GACnC,OAAOA,EAAM/B,KAAKgC,cAAcC,SAASf,EAAYc,iBAEvD,OAAsB,IAAlBxC,EAAO0C,OACFC,EAAA,oBAAIhD,UAAU,MAAd,WAGLgD,EAAA,qBAAKhD,UAAU,UACbgD,EAAA,cAACC,EAAD,CAAWlC,aAAcS,KAAKI,iBAC9BoB,EAAA,cAACE,EAAD,CAAU7C,OAAQqC,YA9BVS,cCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.d2662721.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({\n  robotEmail,\n  robotName,\n  robotId\n}: {\n  robotEmail: string;\n  robotName: string;\n  robotId: number;\n}) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shaddw5\">\n      <img alt=\"robots\" src={`https://robohash.org/${robotId}?size=200x200`} />\n      <div>\n        <h2>{robotName}</h2>\n        <p>{robotEmail}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport { IRobot } from \"../../containers/App\";\nimport Card from \"../Card/Card\";\n\nconst CardList = ({ robots }: { robots: Array<IRobot> }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={robots[i].id}\n            robotEmail={robots[i].email}\n            robotName={robots[i].name}\n            robotId={robots[i].id}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./SearchBox.css\";\n\ninterface ISearchBoxProps {\n  searchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\n}\n\nconst SearchBox = ({ searchChange }: ISearchBoxProps) => {\n  return (\n    <nav>\n      <div className=\"pa2 bg-lightest-blue\">\n        <h1 className=\"f2\">RoboFriends</h1>\n        <input\n          className=\"pa3 ba b--green bg-lightest-blue\"\n          type=\"search\"\n          placeholder=\"Search Robots\"\n          onChange={searchChange}\n        />\n      </div>\n    </nav>\n  );\n};\n\nexport default SearchBox;\n","import * as React from \"react\";\nimport \"./App.css\";\nimport CardList from \"../components/CardList/CardList\";\nimport SearchBox from \"../components/SearchBox/SearchBox\";\nimport \"tachyons\";\n\nexport interface IRobot {\n  name: string;\n  id: number;\n  username: string;\n  email: string;\n}\n\ninterface IAppState {\n  robots: Array<IRobot>;\n  searchfield: string;\n}\n\ninterface IAppProps {}\n\nclass App extends React.Component<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props);\n    this.state = {\n      robots: [],\n      searchfield: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(users => this.setState({ robots: users }));\n  }\n\n  onSearchChange = (event: React.SyntheticEvent<HTMLInputElement>): void => {\n    this.setState({ searchfield: event.currentTarget.value });\n  };\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    if (robots.length === 0) {\n      return <h1 className=\"tc\">Loading</h1>;\n    } else {\n      return (\n        <div className=\"tc pt7\">\n          <SearchBox searchChange={this.onSearchChange} />\n          <CardList robots={filteredRobots} />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}